# overrides all
priority 1


snippet ct.hrl "common test lib" b
-include_lib("common_test/include/ct.hrl").
endsnippet

snippet eunit.hrl "eunit test lib" b
-include_lib("eunit/include/eunit.hrl").
endsnippet

snippet assert.hrl "include asserts" b
-include_lib("stdlib/include/assert.hrl").
endsnippet

snippet err
{error, Error}
endsnippet

snippet cerr
{error, Error} ->
	{error, Error}${0}
endsnippet

snippet exall
-compile(nowarn_export_all).
-compile(export_all).
endsnippet

snippet exp "export" b
-export([${VISUAL}${0}]).
endsnippet

snippet doc "doc tag" b
%% @doc ${0}
endsnippet

snippet pat "Case:Receive:Try Clause"
${1:pattern}${2: when ${3:guard}} ->
	${4:body}
endsnippet

snippet casev
${1} -> $1;${0}
endsnippet

snippet mod "Module Directive" b
-module(`!p snip.rv = snip.basename or "module"`).
endsnippet

snippet beh "Behaviour" b
-behaviour(${0}).
endsnippet

snippet || "List Comprehension"
[${1:X} || ${2:X} <- ${3:List}${4:, gen}]
endsnippet

snippet gen "Generator Expression"
${1:X} <- ${2:List}${3:, gen}
endsnippet

snippet def
	-define(${1:macro}, ${2:body}).
endsnippet

snippet fun
	fun (${1:Parameters}) ->
		${2:body}
	end
endsnippet

snippet try
	try
		${1:${VISUAL}}
	catch
		${2:_:_} -> ${0:got_some_exception}
	end
endsnippet

snippet todo
	%% TODO: ${0}
endsnippet

snippet supervisor
-module(${1:`!p snip.rv = snip.basename or "module"`}).

-behaviour(supervisor).

-define(CHILD(I, Type), #{
	id => I,
	start => {I, start_link},
	restart => permanent,
	shutdown => 5000,
	type => Type,
	modules => [I]
}).

-define(WORKER(M), CHILD(M, worker)).
-define(SUPERVISOR(M), CHILD(M, supervisor)).

%% API
-export([start_link/0]).

%% Supervisor callbacks
-export([init/1]).

-define(SERVER, ?MODULE).

%%%===================================================================
%% API
%%%===================================================================

start_link() ->
	supervisor:start_link({local, ?SERVER}, ?MODULE, []).

%%%===================================================================
%% Supervisor callbacks
%%%===================================================================

init([]) ->
    Children = [
        ?SUPERVISOR(mod_sup),
        ?WORKER(mod)
    ],
	SupFlags = #{
		strategy =>  one_for_one,
		intensity => 1,
		period => 5
	},
	{ok, {SupFlags, Children}}.
endsnippet

snippet ct
-module(${1:`!p snip.rv = snip.basename or "module"`}).
-compile(nowarn_export_all).
-compile(export_all).

-include_lib("common_test/include/ct.hrl").
-include_lib("eunit/include/eunit.hrl").

all() -> 
	[
		standalone_test1,
		{group, group1}
	].

groups() ->
	[
		{group1, [parallel, shuffle], [
			test1
		]}
	].

init_per_suite(Config) ->
	Config.

init_per_group(_Group, Config) ->
	Config.

init_per_testcase(_Test, Config) ->
	Config.

%%%===================================================================
%%% Tests
%%%===================================================================
test1(_Config) ->
	ok.

%%%===================================================================
%%% Helpers
%%%===================================================================

endsnippet

snippet eunit
-module(${1:`!p snip.rv = snip.basename or "module"`}).

-include_lib("eunit/include/eunit.hrl").

%%%===================================================================
%%% Fixtures
%%%===================================================================

start() ->
	{ok, Pid} = project:start_link(),
	Pid.

stop(Pid) ->
	gen_server:stop(Pid).

%%%===================================================================
%%% Tests
%%%===================================================================

gen_foreach_test_() ->
	{foreach, fun start/0, fun stop/1, [
		fun run_thing1/1,
		run_thing2/1
	]}.

gen_setup_test_() ->
	{setup,
		fun start/0, 
		fun stop/1,
		fun run_thing1/1
	]}.

normal_test() ->
	?assert(true).

test_gen_() -> 
	[
		?_assert(true)
	].

%%%===================================================================
%%% Helpers
%%%===================================================================

endsnippet

snippet gen_server
-module(${1:`!p snip.rv = snip.basename or "module"`}).

-behaviour(gen_server).

%% API
-export([start_link/0]).

%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/2, handle_continue/2, terminate/2, code_change/3]).

-define(SERVER, ?MODULE).

-type state() :: #{}.

%%%===================================================================
%%% API
%%%===================================================================

start_link() ->
	gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

%%%===================================================================
%%% gen_server callbacks
%%%===================================================================

-spec init([]) -> state().
init([]) ->
	{ok, #{}}.

handle_call({a, Data}, _From, State) ->
	Reply = ok,
	{reply, Reply, State};
handle_call(Request, _From, _State) ->
	error({unhandled_call, Request}).

handle_cast({b, _Data}, State) ->
	{noreply, State};
handle_cast(Msg, _State) ->
	error({unhandled_cast, Msg}).

handle_info({c, _Data}, State) ->
	{noreply, State};
handle_info(Info, _State) ->
	error({unhandled_info, Info}).

handle_continue({d, _Data}, State) ->
	{noreply, State}.
handle_continue(Continue, _State) ->
	error({unhandled_continue, Continue}).

terminate(_Reason, _State) ->
	ok.

code_change(_OldVsn, State, _Extra) ->
	{ok, State}.

%%%===================================================================
%%% Internal functions
%%%===================================================================
endsnippet

snippet cast
gen_server:cast(?SERVER, ${0}),
endsnippet

snippet call
gen_server:call(?SERVER, ${0}),
endsnippet

snippet handle_cast
handle_cast(${1}, ${2}State) ->
	${0}{noreply, State};
endsnippet

snippet handle_call
handle_call(${1}, _From, ${2}State) ->
	${0}{reply, ok, State};
endsnippet

snippet handle_info
handle_info(${1}, ${2}State) ->
	${0}{noreply, State};
endsnippet

snippet handle_continue
handle_continue(${1}, ${2}State) ->
	${0}{noreply, State};
endsnippet

# TODO: pal
#   name:Var Var 
#   use . at end to put . not ,
#   leading: Var1 

global !p
import re

# Var = ~p
reg_format = re.compile(r'\b([\w:]+)\b,?')
reg_prefix = re.compile(r'(.*:)(.*)')

def erlformat(spec, newline=False):
	# A, B, C to
	# A = ~p, B = ~p, C = ~p
	if not spec:
		return ""

	# also allow prefix
	# eg: debug info: A, B, C
	m = reg_prefix.match(spec)
	if m is not None:
		ret = m.group(1)
		spec = m.group(2)
	else:
		ret = ""

	for m in reg_format.finditer(spec):
		ret += f"{m.group(1)} = ~p, "

	# without trailing comma
	ret = ret[:-2]
	if newline:
		ret += "~n"

	return ret


def quote_words(spec):
	if not spec:
		return ""

	words = spec.split(",")
	return ", ".join([f'"{word.strip()}"' for word in words])

endglobal


snippet pal
%% $1
ct:pal("${0}`!p snip.rv = erlformat(t[1])`", [$1]),
endsnippet

snippet iof
%% $1
io:format("${0}`!p snip.rv = erlformat(t[1], True)`", [$1]),
endsnippet

snippet rfdbg
%% $1
rfdbg:log(?MODULE, ?FUNCTION_NAME, [${0}`!p snip.rv = quote_words(t[1])`], [$1]),
endsnippet

snippet palv
ct:pal("${VISUAL} = ~p", [${VISUAL}]),
endsnippet

snippet palx
ct:pal("${0}", []),
endsnippet

snippet escript "add escript shbang" b
#!/usr/bin/env escript -c

-export([main/1]).

main(Args) ->
	ok.
endsnippet

snippet ctest "create ct test func" b
test_${1}(_Config) ->
	${0:ok}.
endsnippet

snippet uuid
<<"`!p from uuid import uuid4
if not snip.c:
	snip.rv = str(uuid4())`">>,
endsnippet

# TODO snippet for "normal ct:pal"


# vim:ft=snippets:
