priority -50

# TODO:
#  beginning of ct suite
#  pal variant with module_name + ?FUNCTION_NAME
#  nice that pal/format variants detect trailing comma or not

snippet ct "common test lib" b
-include_lib("common_test/include/ct.hrl").
endsnippet

snippet eunit "eunit test lib" b
-include_lib("eunit/include/eunit.hrl").
endsnippet

snippet err
{error, Error}
endsnippet

snippet cerr
{error, Error} ->
	{error, Error}${0}
endsnippet

snippet exall
-compile(export_all).
endsnippet

snippet pat "Case:Receive:Try Clause"
${1:pattern}${2: when ${3:guard}} ->
	${4:body}
endsnippet

snippet mod "Module Directive" b
-module(${1:`!p snip.rv = snip.basename or "module"`}).
endsnippet

snippet || "List Comprehension"
[${1:X} || ${2:X} <- ${3:List}${4:, gen}]
endsnippet

snippet gen "Generator Expression"
${1:X} <- ${2:List}${3:, gen}
endsnippet

snippet beh "Behaviours"
-behaviour(${0}).
endsnippet

snippet def
	-define(${1:macro}, ${2:body}).
endsnippet

snippet fun
	fun (${1:Parameters}) ->
		${2:body}
	end
endsnippet

snippet try
	try
		${1:${VISUAL}}
	catch
		${2:_:_} -> ${0:got_some_exception}
	end
endsnippet

snippet todo
	%% TODO: ${0}
endsnippet

snippet supervisor
-module(${1:`!p snip.rv = snip.basename or "module"`}).

-behaviour(supervisor).

-define(CHILD(I, Type), {I, {I, start_link, []}, transient, 5000, Type, [I]}).

%% API
-export([start_link/0]).

%% Supervisor callbacks
-export([init/1]).

-define(SERVER, ?MODULE).

start_link() ->
	supervisor:start_link({local, ?SERVER}, ?MODULE, []).

init([]) ->
	{ok, {{one_for_all, 0, 1}, []}}.
endsnippet

snippet gen_server
-module(${1:`!p snip.rv = snip.basename or "module"`}).

-behaviour(gen_server).

%% API
-export([start_link/0]).

%% gen_server callbacks
-export([init/1, handle_call/3, handle_cast/2, handle_info/2, terminate/2, code_change/3]).

-define(SERVER, ?MODULE).

-record(state, {}).

%%%===================================================================
%%% API
%%%===================================================================

start_link() ->
	gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

%%%===================================================================
%%% gen_server callbacks
%%%===================================================================

init([]) ->
	{ok, #state{}}.

handle_call(_Request, _From, State) ->
	Reply = ok,
	{reply, Reply, State}.

handle_cast(_Msg, State) ->
	{noreply, State}.

handle_info(_Info, State) ->
	{noreply, State}.

terminate(_Reason, _State) ->
	ok.

code_change(_OldVsn, State, _Extra) ->
	{ok, State}.

%%%===================================================================
%%% Internal functions
%%%===================================================================
endsnippet

global !p
import re

# Var = ~p
reg_format = re.compile(r'\b([A-Z]\w*)\b,?')

def erlformat(spec, newline=False):
	# A, B, C to
	# A = ~p, B = ~p, C = ~p
	if not spec:
		return ""

	ret = ""
	for m in reg_format.finditer(spec):
		ret += f"{m.group(1)} = ~p, "

	# without trailing comma
	ret = ret[:-2]
	if newline:
		ret += "~n"

	return ret

endglobal

snippet pal
%% $1
ct:pal("`!p snip.rv = erlformat(t[1])`", [$1])
endsnippet

snippet iof
%% $1
io:format("`!p snip.rv = erlformat(t[1], True)`", [$1])
endsnippet

snippet palv
ct:pal("${VISUAL} = ~p", [${VISUAL}]),
endsnippet


# TODO: deprecate, "old way"
snippet pal2
ct:pal("$1 = ~p", [$1])
endsnippet

snippet iof2
io:format("$1 = ~p~n", [$1])
endsnippet



snippet escript "add escript shbang" b
#!/usr/bin/env escript -c

-export([main/1]).

main(Args) ->
	ok.
endsnippet

snippet ctest "create ct test func" b
${1}_test(_Config) ->
	${0}.
endsnippet


# vim:ft=snippets:
